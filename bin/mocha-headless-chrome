#!/usr/bin/env node
'use strict'

const chalk = require('chalk')
const deepAssign = require('deep-assign')
const fs = require('fs')
const meow = require('meow')
const path = require('path')

const MochaChrome = require('../')
const cli = meow(chalk`{underline Usage}
  $ mocha-chrome <file.html> [options]


{underline Options}
  --mocha                     A JSON string representing a config object to pass to Mocha
  --log-level                 Specify a log level; trace, debug, info, warn, error
  --no-colors                 Disable colors in Mocha's output
  --reporter                  Specify the Mocha reporter to use
  --timeout                   Specify the test startup timeout to use
  --ignore-exceptions         Suppress exceptions logging
  --ignore-console            Suppress console logging
  --ignore-resource-errors    Suppress resource error logging
  --chrome-flags              A JSON string representing an array of flags to pass to Chrome
  --version


{underline Examples}
  $ mocha-headless-chrome test.html --no-colors
  $ mocha-headless-chrome test.html --reporter dot
  $ mocha-headless-chrome test.html --mocha '\{"ui":"tdd"\}'
  $ mocha-headless-chrome test.html --chrome-flags '["--some-flag", "--and-another-one"]'
`)

if (!cli.input.length && !Object.getOwnPropertyNames(cli.flags).length) {
  cli.showHelp()
}

const file = cli.input[0]
const flags = cli.flags
let url = file,
  code = 0

function fail (message) {
  console.log(message)
  process.exit(1)
}

if (!file && !file.length) {
  fail('You must specify a file to run')
}

if (!/^(file|http(s?)):\/\//.test(file)) {
  if (!fs.existsSync(file)) {
    url = 'file://' + path.resolve(path.join(process.cwd(), file))
  }

  if (!fs.existsSync(file)) {
    fail('You must specify an existing file.')
  }

  url = 'file://' + fs.realpathSync(file)
}

const {logLevel, ignoreExceptions, ignoreConsole, ignoreResourceErrors, colors, reporter} = flags
const mocha = Object.assign(JSON.parse(flags.mocha || '{}'), {useColors: !colors, reporter})
const chromeFlags = JSON.parse(flags.chromeFlags || '[]')
const options = {
  chromeFlags,
  ignoreExceptions,
  ignoreConsole,
  ignoreResourceErrors,
  logLevel,
  mocha,
  url,
}

process.on('unhandledRejection', error => {
  console.error('Promise Rejection: ', error)
})

const runner = new MochaChrome(options)

runner.on('ended', stats => {
  code = stats.failures
})

runner.on('failure', message => {
  code = 1
})

runner.on('exit', () => process.exit(code))

runner
  .connect()
  .then(() => runner.run())
